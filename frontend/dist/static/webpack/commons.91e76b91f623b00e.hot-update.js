"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("commons",{

/***/ "./src/pages/api.js":
/*!**************************!*\
  !*** ./src/pages/api.js ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_URL: function() { return /* binding */ API_URL; },\n/* harmony export */   WC_CONSUMER_KEY: function() { return /* binding */ WC_CONSUMER_KEY; },\n/* harmony export */   WC_CONSUMER_SECRET: function() { return /* binding */ WC_CONSUMER_SECRET; },\n/* harmony export */   \"default\": function() { return /* binding */ handler; },\n/* harmony export */   deleteBlogPost: function() { return /* binding */ deleteBlogPost; },\n/* harmony export */   getBlogById: function() { return /* binding */ getBlogById; },\n/* harmony export */   getBlogPosts: function() { return /* binding */ getBlogPosts; },\n/* harmony export */   getCountryPrefix: function() { return /* binding */ getCountryPrefix; },\n/* harmony export */   getPropertyById: function() { return /* binding */ getPropertyById; },\n/* harmony export */   getPropertyPosts: function() { return /* binding */ getPropertyPosts; },\n/* harmony export */   handleApiError: function() { return /* binding */ handleApiError; },\n/* harmony export */   sendEmail: function() { return /* binding */ sendEmail; },\n/* harmony export */   sendPropertyEmail: function() { return /* binding */ sendPropertyEmail; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n// Exportar solo las funciones de utilidad sin crear una ruta API\nconst API_URL = \"https://goza-madrid.onrender.com\" || 0;\n// Definir las claves de API de WooCommerce\nconst WC_CONSUMER_KEY = process.env.NEXT_PUBLIC_NEXT_PUBLIC_WOO_COMMERCE_KEY;\nconst WC_CONSUMER_SECRET = \"cs_f194d11b41ca92cdd356145705fede711cd233e5\";\n// Función auxiliar para manejar errores\nconst handleApiError = (error, functionName)=>{\n    console.error(\"Error en \".concat(functionName, \":\"), error);\n    if (error.response) {\n        // El servidor respondió con un código de error\n        throw new Error(\"Error \".concat(error.response.status, \": \").concat(error.response.statusText));\n    } else if (error.request) {\n        // La petición fue hecha pero no se recibió respuesta\n        throw new Error(\"No se recibi\\xf3 respuesta del servidor\");\n    } else {\n        // Error al configurar la petición\n        throw new Error(error.message || \"Error desconocido\");\n    }\n};\nasync function getCountryPrefix() {\n    try {\n        console.log(\"Intentando obtener prefijos de pa\\xeds desde la API local\");\n        // Usar AbortController para evitar bloqueos\n        const controller = new AbortController();\n        const timeoutId = setTimeout(()=>controller.abort(), 5000); // 5 segundos timeout\n        const response = await fetch(\"\".concat(API_URL, \"/prefix\"), {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            signal: controller.signal\n        });\n        clearTimeout(timeoutId);\n        // Si la respuesta fue exitosa y es JSON, devolver los datos\n        if (response.ok) {\n            const contentType = response.headers.get(\"content-type\");\n            if (contentType && contentType.includes(\"application/json\")) {\n                return await response.json();\n            }\n        }\n        // Si algo falla, devolver prefijos por defecto\n        console.log(\"Usando prefijos de pa\\xeds por defecto\");\n        return getDefaultCountryPrefixes();\n    } catch (error) {\n        console.error(\"Error al obtener prefijos de pa\\xeds:\", error.message);\n        // En caso de error, devolver prefijos por defecto\n        return getDefaultCountryPrefixes();\n    }\n}\n// Esta es la forma correcta, un junior podría hacerlo así:\nasync function getBlogPosts() {\n    // Array donde guardaremos todos los blogs\n    let allBlogs = [];\n    // 1. Intentar obtener blogs de WordPress usando nuestro proxy\n    try {\n        console.log(\"Obteniendo blogs de WordPress...\");\n        // Usar el proxy con el parámetro endpoint=wp para indicar que queremos la API de WordPress\n        const wpResponse = await fetch(\"/api/wordpress-proxy?endpoint=wp&path=posts&_embed=true\");\n        console.log(\"Respuesta de WordPress:\", {\n            status: wpResponse.status,\n            statusText: wpResponse.statusText\n        });\n        if (wpResponse.ok) {\n            const wpBlogs = await wpResponse.json();\n            console.log(\"Obtenidos \".concat(wpBlogs.length, \" blogs de WordPress\"));\n            // Añadir los blogs de WordPress al array, con la fuente marcada\n            wpBlogs.forEach((blog)=>{\n                var _blog_title, _blog_title1, _blog_content, _blog_excerpt;\n                // Procesar la imagen destacada\n                let featuredImage = null;\n                // Intentar obtener la imagen destacada desde _embedded\n                if (blog._embedded && blog._embedded[\"wp:featuredmedia\"] && blog._embedded[\"wp:featuredmedia\"][0]) {\n                    const media = blog._embedded[\"wp:featuredmedia\"][0];\n                    if (media.media_details && media.media_details.sizes) {\n                        // Buscar la mejor imagen disponible\n                        const sizePriority = [\n                            \"medium_large\",\n                            \"medium\",\n                            \"large\",\n                            \"full\"\n                        ];\n                        for (const size of sizePriority){\n                            if (media.media_details.sizes[size]) {\n                                featuredImage = media.media_details.sizes[size].source_url;\n                                break;\n                            }\n                        }\n                    }\n                    // Si no se encontró ninguna imagen en los tamaños, usar la URL de origen\n                    if (!featuredImage && media.source_url) {\n                        featuredImage = media.source_url;\n                    }\n                }\n                // Si no hay imagen destacada, intentar obtenerla de uagb_featured_image_src\n                if (!featuredImage && blog.uagb_featured_image_src) {\n                    var _blog_uagb_featured_image_src_medium, _blog_uagb_featured_image_src_full;\n                    featuredImage = ((_blog_uagb_featured_image_src_medium = blog.uagb_featured_image_src.medium) === null || _blog_uagb_featured_image_src_medium === void 0 ? void 0 : _blog_uagb_featured_image_src_medium[0]) || ((_blog_uagb_featured_image_src_full = blog.uagb_featured_image_src.full) === null || _blog_uagb_featured_image_src_full === void 0 ? void 0 : _blog_uagb_featured_image_src_full[0]);\n                }\n                // Si aún no hay imagen, usar una imagen por defecto\n                if (!featuredImage) {\n                    featuredImage = \"/img/default-blog-image.jpg\";\n                }\n                // Crear el objeto de blog con la imagen procesada\n                allBlogs.push({\n                    ...blog,\n                    image: {\n                        src: featuredImage,\n                        alt: ((_blog_title = blog.title) === null || _blog_title === void 0 ? void 0 : _blog_title.rendered) || blog.title || \"Imagen del blog\"\n                    },\n                    title: ((_blog_title1 = blog.title) === null || _blog_title1 === void 0 ? void 0 : _blog_title1.rendered) || blog.title || \"\",\n                    content: ((_blog_content = blog.content) === null || _blog_content === void 0 ? void 0 : _blog_content.rendered) || blog.content || \"\",\n                    excerpt: ((_blog_excerpt = blog.excerpt) === null || _blog_excerpt === void 0 ? void 0 : _blog_excerpt.rendered) || blog.excerpt || \"\",\n                    source: \"wordpress\"\n                });\n            });\n        } else {\n            const errorData = await wpResponse.json();\n            console.error(\"Error al obtener blogs de WordPress: \".concat(wpResponse.status), errorData);\n        }\n    } catch (error) {\n        console.error(\"Error con WordPress:\", error.message);\n    }\n    // 2. Intentar obtener blogs de MongoDB usando la API directa\n    try {\n        console.log(\"Obteniendo blogs de MongoDB...\");\n        // Usar la ruta correcta con API_URL\n        const mongoResponse = await fetch(\"\".concat(API_URL, \"/blog\"), {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        console.log(\"Respuesta de MongoDB:\", {\n            status: mongoResponse.status,\n            statusText: mongoResponse.statusText\n        });\n        if (mongoResponse.ok) {\n            const contentType = mongoResponse.headers.get(\"content-type\");\n            if (contentType && contentType.includes(\"application/json\")) {\n                const mongoBlogs = await mongoResponse.json();\n                console.log(\"Obtenidos \".concat(mongoBlogs.length, \" blogs de MongoDB\"));\n                // Añadir los blogs de MongoDB al array, con la fuente marcada\n                mongoBlogs.forEach((blog)=>{\n                    // Procesar las imágenes según el esquema\n                    let blogImages = [];\n                    // Verificar si el blog tiene imágenes\n                    if (blog.images && Array.isArray(blog.images) && blog.images.length > 0) {\n                        // Usar las imágenes del esquema\n                        blogImages = blog.images.map((img)=>{\n                            // Asegurarse de que la URL sea absoluta\n                            const src = typeof img === \"string\" ? img : img.src || \"\";\n                            const imgSrc = src.startsWith(\"http\") ? src : \"\".concat(API_URL).concat(src.startsWith(\"/\") ? \"\" : \"/\").concat(src);\n                            return {\n                                src: imgSrc,\n                                alt: typeof img === \"object\" && img.alt ? img.alt : blog.title || \"Imagen del blog\"\n                            };\n                        });\n                    } else if (blog.image) {\n                        // Compatibilidad con el formato anterior\n                        if (typeof blog.image === \"string\") {\n                            // Si la imagen es una cadena, crear un objeto de imagen\n                            const baseUrl = API_URL;\n                            const imageSrc = blog.image.startsWith(\"http\") ? blog.image : \"\".concat(baseUrl).concat(blog.image.startsWith(\"/\") ? \"\" : \"/\").concat(blog.image);\n                            blogImages = [\n                                {\n                                    src: imageSrc,\n                                    alt: blog.title || \"Imagen del blog\"\n                                }\n                            ];\n                        } else {\n                            // Si ya es un objeto, asegurarse de que la URL sea absoluta\n                            const baseUrl = API_URL;\n                            const src = blog.image.src || blog.image.url || \"\";\n                            blogImages = [\n                                {\n                                    ...blog.image,\n                                    src: src.startsWith(\"http\") ? src : \"\".concat(baseUrl).concat(src.startsWith(\"/\") ? \"\" : \"/\").concat(src)\n                                }\n                            ];\n                        }\n                    } else {\n                        // Si no hay imágenes, usar una por defecto\n                        blogImages = [\n                            {\n                                src: \"/img/default-blog-image.jpg\",\n                                alt: blog.title || \"Imagen del blog\"\n                            }\n                        ];\n                    }\n                    // Asegurarse de que el blog tenga todos los campos necesarios\n                    allBlogs.push({\n                        ...blog,\n                        _id: blog._id || \"mongo-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substring(2, 9)),\n                        title: blog.title || \"Sin t\\xedtulo\",\n                        content: blog.content || blog.description || \"\",\n                        description: blog.description || blog.excerpt || \"\",\n                        date: blog.createdAt || blog.date || new Date().toISOString(),\n                        dateFormatted: blog.dateFormatted || (blog.createdAt ? new Date(blog.createdAt).toLocaleDateString(\"es-ES\") : new Date().toLocaleDateString(\"es-ES\")),\n                        images: blogImages,\n                        image: blogImages[0] || {\n                            src: \"/img/default-blog-image.jpg\",\n                            alt: \"Imagen del blog\"\n                        },\n                        source: \"mongodb\"\n                    });\n                });\n            } else {\n                console.error(\"La respuesta no es JSON v\\xe1lido:\", await mongoResponse.text());\n            }\n        } else {\n            try {\n                const errorText = await mongoResponse.text();\n                console.error(\"Error al obtener blogs de MongoDB: \".concat(mongoResponse.status), errorText);\n            } catch (e) {\n                console.error(\"Error al obtener blogs de MongoDB: \".concat(mongoResponse.status), mongoResponse.statusText);\n            }\n        }\n    } catch (error) {\n        console.error(\"Error con MongoDB:\", error.message);\n    }\n    console.log(\"Total de blogs obtenidos: \".concat(allBlogs.length));\n    return allBlogs;\n}\nasync function deleteBlogPost(id) {\n    const response = await fetch(\"\".concat(API_URL, \"/blog/\").concat(id), {\n        method: \"DELETE\"\n    });\n    return response.json();\n}\n// Función de utilidad para reintentos con backoff exponencial\nasync function fetchConReintentos(fetchFn) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const { maxRetries = 5, initialTimeout = 2000, maxTimeout = 30000, factor = 2, isProduction = \"development\" === \"production\" } = options;\n    let intento = 1;\n    let timeout = initialTimeout;\n    let lastError = null;\n    while(intento <= (isProduction ? maxRetries : 2)){\n        try {\n            console.log(\"[DEBUG] Intento \".concat(intento, \" de \").concat(isProduction ? maxRetries : 2));\n            // Añadir jitter aleatorio para evitar thundering herd\n            const jitter = Math.random() * 1000;\n            const timeoutWithJitter = Math.min(timeout + jitter, maxTimeout);\n            if (intento > 1) {\n                console.log(\"[DEBUG] Esperando \".concat(Math.round(timeoutWithJitter), \"ms antes del siguiente intento\"));\n                await new Promise((resolve)=>setTimeout(resolve, timeoutWithJitter));\n            }\n            const result = await fetchFn();\n            return result;\n        } catch (error) {\n            console.error(\"[DEBUG] Error en intento \".concat(intento, \":\"), error);\n            lastError = error;\n            // Incrementar el timeout de forma exponencial\n            timeout = Math.min(timeout * factor, maxTimeout);\n            intento++;\n            // Si es el último intento, lanzar el error\n            if (intento > (isProduction ? maxRetries : 2)) {\n                throw lastError;\n            }\n        }\n    }\n    throw lastError || new Error(\"Error despu\\xe9s de m\\xfaltiples intentos\");\n}\nasync function getBlogById(id) {\n    try {\n        console.log(\"[DEBUG] Iniciando getBlogById para ID: \".concat(id));\n        const isProduction = \"development\" === \"production\";\n        const isMongoId = /^[0-9a-fA-F]{24}$/.test(id);\n        const fetchData = async ()=>{\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>{\n                console.log(\"[DEBUG] Timeout alcanzado, abortando petici\\xf3n\");\n                controller.abort();\n            }, isProduction ? 30000 : 10000);\n            try {\n                let response;\n                if (isMongoId) {\n                    const baseUrl =  false ? 0 : \"\";\n                    const url = \"\".concat(baseUrl, \"/blog/\").concat(id);\n                    response = await fetch(url, {\n                        signal: controller.signal,\n                        headers: {\n                            \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n                            \"Pragma\": \"no-cache\",\n                            \"Expires\": \"0\"\n                        }\n                    });\n                } else {\n                    const url = \"/api/wordpress-proxy?endpoint=wp&path=posts/\".concat(id, \"&_embed=true\");\n                    response = await fetch(url, {\n                        signal: controller.signal,\n                        headers: {\n                            \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n                            \"Pragma\": \"no-cache\",\n                            \"Expires\": \"0\"\n                        }\n                    });\n                }\n                clearTimeout(timeoutId);\n                if (!response.ok) {\n                    throw new Error(\"Error HTTP: \".concat(response.status));\n                }\n                const data = await response.json();\n                return isMongoId ? procesarBlogMongoDB(data) : procesarBlogWordPress(data);\n            } catch (error) {\n                clearTimeout(timeoutId);\n                throw error;\n            }\n        };\n        return await fetchConReintentos(fetchData, {\n            maxRetries: 7,\n            initialTimeout: 2000,\n            maxTimeout: 30000,\n            factor: 1.5,\n            isProduction\n        });\n    } catch (error) {\n        console.error(\"[DEBUG] Error final en getBlogById:\", error);\n        throw error;\n    }\n}\n// Función auxiliar para procesar blogs de MongoDB\nfunction procesarBlogMongoDB(data) {\n    var _blogImages_;\n    let blogImages = [];\n    if (data.images && Array.isArray(data.images) && data.images.length > 0) {\n        blogImages = data.images.map((img)=>{\n            const src = typeof img === \"string\" ? img : img.src || \"\";\n            const imgSrc = src.startsWith(\"http\") ? src : \"\".concat(API_URL).concat(src.startsWith(\"/\") ? \"\" : \"/\").concat(src);\n            return {\n                src: imgSrc,\n                alt: typeof img === \"object\" && img.alt ? img.alt : data.title || \"Imagen del blog\"\n            };\n        });\n    } else if (data.image) {\n        if (typeof data.image === \"string\") {\n            const imageSrc = data.image.startsWith(\"http\") ? data.image : \"\".concat(API_URL).concat(data.image.startsWith(\"/\") ? \"\" : \"/\").concat(data.image);\n            blogImages = [\n                {\n                    src: imageSrc,\n                    alt: data.title || \"Imagen del blog\"\n                }\n            ];\n        } else {\n            const src = data.image.src || data.image.url || \"\";\n            blogImages = [\n                {\n                    ...data.image,\n                    src: src.startsWith(\"http\") ? src : \"\".concat(API_URL).concat(src.startsWith(\"/\") ? \"\" : \"/\").concat(src)\n                }\n            ];\n        }\n    }\n    if (blogImages.length === 0) {\n        blogImages = [\n            {\n                src: \"/img/default-blog-image.jpg\",\n                alt: data.title || \"Imagen del blog\"\n            }\n        ];\n    }\n    return {\n        ...data,\n        _id: data._id,\n        title: data.title || \"Sin t\\xedtulo\",\n        content: data.content || data.description || \"\",\n        description: data.description || data.excerpt || \"\",\n        date: data.createdAt || data.date || new Date().toISOString(),\n        dateFormatted: data.dateFormatted || (data.createdAt ? new Date(data.createdAt).toLocaleDateString(\"es-ES\") : new Date().toLocaleDateString(\"es-ES\")),\n        images: blogImages,\n        image: blogImages[0],\n        imageUrl: ((_blogImages_ = blogImages[0]) === null || _blogImages_ === void 0 ? void 0 : _blogImages_.src) || \"/img/default-blog-image.jpg\",\n        source: \"mongodb\"\n    };\n}\n// Función auxiliar para procesar blogs de WordPress\nfunction procesarBlogWordPress(data) {\n    var _data_title, _data_content, _data_excerpt, _data_title1, _data_title2;\n    let featuredImage = null;\n    if (data._embedded && data._embedded[\"wp:featuredmedia\"] && data._embedded[\"wp:featuredmedia\"][0]) {\n        const media = data._embedded[\"wp:featuredmedia\"][0];\n        if (media.media_details && media.media_details.sizes) {\n            const sizePriority = [\n                \"medium_large\",\n                \"medium\",\n                \"large\",\n                \"full\"\n            ];\n            for (const size of sizePriority){\n                if (media.media_details.sizes[size]) {\n                    featuredImage = media.media_details.sizes[size].source_url;\n                    break;\n                }\n            }\n        }\n        if (!featuredImage && media.source_url) {\n            featuredImage = media.source_url;\n        }\n    }\n    if (!featuredImage && data.uagb_featured_image_src) {\n        var _data_uagb_featured_image_src_medium, _data_uagb_featured_image_src_full;\n        featuredImage = ((_data_uagb_featured_image_src_medium = data.uagb_featured_image_src.medium) === null || _data_uagb_featured_image_src_medium === void 0 ? void 0 : _data_uagb_featured_image_src_medium[0]) || ((_data_uagb_featured_image_src_full = data.uagb_featured_image_src.full) === null || _data_uagb_featured_image_src_full === void 0 ? void 0 : _data_uagb_featured_image_src_full[0]);\n    }\n    if (!featuredImage) {\n        featuredImage = \"/img/default-blog-image.jpg\";\n    }\n    return {\n        ...data,\n        _id: \"wp-\".concat(data.id),\n        id: data.id,\n        title: ((_data_title = data.title) === null || _data_title === void 0 ? void 0 : _data_title.rendered) || data.title || \"\",\n        content: ((_data_content = data.content) === null || _data_content === void 0 ? void 0 : _data_content.rendered) || data.content || \"\",\n        excerpt: ((_data_excerpt = data.excerpt) === null || _data_excerpt === void 0 ? void 0 : _data_excerpt.rendered) || data.excerpt || \"\",\n        date: data.date,\n        dateFormatted: new Date(data.date).toLocaleDateString(\"es-ES\"),\n        images: [\n            {\n                src: featuredImage,\n                alt: ((_data_title1 = data.title) === null || _data_title1 === void 0 ? void 0 : _data_title1.rendered) || data.title || \"Imagen del blog\"\n            }\n        ],\n        image: {\n            src: featuredImage,\n            alt: ((_data_title2 = data.title) === null || _data_title2 === void 0 ? void 0 : _data_title2.rendered) || data.title || \"Imagen del blog\"\n        },\n        imageUrl: featuredImage,\n        slug: data.slug,\n        source: \"wordpress\"\n    };\n}\nasync function getPropertyPosts() {\n    let wpData = [];\n    let mongoData = [];\n    // 1. Intentar obtener propiedades de WooCommerce a través del proxy\n    try {\n        console.log(\"Obteniendo propiedades de WooCommerce...\");\n        // Usar nuestro proxy de Next.js\n        const firstPageResponse = await fetch(\"/api/wordpress-proxy?per_page=100\");\n        console.log(\"Respuesta de WooCommerce:\", {\n            status: firstPageResponse.status,\n            statusText: firstPageResponse.statusText\n        });\n        if (!firstPageResponse.ok) {\n            console.error(\"Error al obtener propiedades de WooCommerce: \".concat(firstPageResponse.status, \" \").concat(firstPageResponse.statusText));\n            throw new Error(\"Error al obtener propiedades: \".concat(firstPageResponse.status));\n        }\n        // Obtener el número total de páginas\n        const totalPages = parseInt(firstPageResponse.headers.get(\"X-WP-TotalPages\") || \"1\");\n        console.log(\"Total de p\\xe1ginas de propiedades: \".concat(totalPages));\n        // Obtener los datos de la primera página\n        const firstPageData = await firstPageResponse.json();\n        // Marcar las propiedades como provenientes de WooCommerce\n        const wpPropertiesWithSource = firstPageData.map((property)=>({\n                ...property,\n                source: \"woocommerce\"\n            }));\n        wpData = [\n            ...wpPropertiesWithSource\n        ];\n        // Si hay más páginas, obtenerlas en paralelo\n        if (totalPages > 1) {\n            const pagePromises = [];\n            for(let page = 2; page <= totalPages; page++){\n                pagePromises.push(fetch(\"/api/wordpress-proxy?page=\".concat(page, \"&per_page=100\")).then((res)=>{\n                    if (!res.ok) throw new Error(\"Error en p\\xe1gina \".concat(page, \": \").concat(res.status));\n                    return res.json();\n                }).then((pageData)=>{\n                    // Marcar las propiedades como provenientes de WooCommerce\n                    return pageData.map((property)=>({\n                            ...property,\n                            source: \"woocommerce\"\n                        }));\n                }));\n            }\n            // Esperar a que todas las promesas adicionales se resuelvan\n            const additionalPagesData = await Promise.all(pagePromises);\n            // Añadir los datos adicionales a wpData\n            additionalPagesData.forEach((pageData)=>{\n                wpData = [\n                    ...wpData,\n                    ...pageData\n                ];\n            });\n        }\n        console.log(\"Total de propiedades de WooCommerce obtenidas: \".concat(wpData.length));\n    } catch (wpError) {\n        console.error(\"Error al obtener propiedades de WooCommerce:\", wpError);\n    }\n    // 2. Intentar obtener propiedades de MongoDB\n    try {\n        console.log(\"Obteniendo propiedades de MongoDB...\");\n        // Usar la ruta correcta con API_URL\n        const mongoResponse = await fetch(\"\".concat(API_URL, \"/property\"));\n        console.log(\"Respuesta de MongoDB:\", {\n            status: mongoResponse.status,\n            statusText: mongoResponse.statusText\n        });\n        if (mongoResponse.ok) {\n            const contentType = mongoResponse.headers.get(\"content-type\");\n            if (contentType && contentType.includes(\"application/json\")) {\n                const properties = await mongoResponse.json();\n                console.log(\"Propiedades de MongoDB obtenidas:\", properties);\n                // Procesar las propiedades para asegurar que tengan el formato correcto\n                mongoData = properties.map((property)=>{\n                    // Procesar las imágenes para asegurar URLs absolutas\n                    let images = [];\n                    if (property.images) {\n                        if (Array.isArray(property.images)) {\n                            images = property.images.map((img)=>{\n                                if (typeof img === \"string\") {\n                                    // Si la imagen es una cadena, verificar si es una URL absoluta\n                                    return img.startsWith(\"http\") ? img : \"\".concat(API_URL).concat(img.startsWith(\"/\") ? \"\" : \"/\").concat(img);\n                                } else if (typeof img === \"object\" && img.url) {\n                                    // Si es un objeto con URL\n                                    return img.url.startsWith(\"http\") ? img.url : \"\".concat(API_URL).concat(img.url.startsWith(\"/\") ? \"\" : \"/\").concat(img.url);\n                                }\n                                return img;\n                            });\n                        } else if (typeof property.images === \"string\") {\n                            // Si images es una cadena\n                            const img = property.images;\n                            images = [\n                                img.startsWith(\"http\") ? img : \"\".concat(API_URL).concat(img.startsWith(\"/\") ? \"\" : \"/\").concat(img)\n                            ];\n                        }\n                    }\n                    // Si no hay imágenes, usar una imagen por defecto\n                    if (images.length === 0) {\n                        images = [\n                            \"/img/default-property-image.jpg\"\n                        ];\n                    }\n                    return {\n                        ...property,\n                        _id: property._id,\n                        title: property.title || property.name || \"Propiedad sin t\\xedtulo\",\n                        description: property.description || \"\",\n                        price: property.price || \"0\",\n                        location: property.location || \"Madrid\",\n                        bedrooms: property.bedrooms || 0,\n                        bathrooms: property.bathrooms || 0,\n                        size: property.m2 || property.area || property.size || 0,\n                        livingArea: property.m2 || property.area || property.size || 0,\n                        images: images,\n                        source: \"mongodb\"\n                    };\n                });\n                console.log(\"Total de propiedades de MongoDB obtenidas: \".concat(mongoData.length));\n            } else {\n                console.error(\"La respuesta no es JSON v\\xe1lido:\", await mongoResponse.text());\n            }\n        } else {\n            try {\n                const errorText = await mongoResponse.text();\n                console.error(\"Error al obtener propiedades de MongoDB: \".concat(mongoResponse.status), errorText);\n            } catch (e) {\n                console.error(\"Error al obtener propiedades de MongoDB: \".concat(mongoResponse.status), mongoResponse.statusText);\n            }\n        }\n    } catch (mongoError) {\n        console.error(\"Error al obtener propiedades de MongoDB:\", mongoError);\n    }\n    // Combinar los resultados de ambas fuentes\n    const combinedData = [\n        ...mongoData,\n        ...wpData\n    ];\n    console.log(\"Total de propiedades combinadas: \".concat(combinedData.length));\n    return combinedData;\n}\nasync function getPropertyById(id) {\n    try {\n        console.log(\"[DEBUG] Iniciando getPropertyById para ID: \".concat(id));\n        const isProduction = \"development\" === \"production\";\n        const isMongoId = /^[0-9a-fA-F]{24}$/.test(id);\n        const fetchData = async ()=>{\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>{\n                console.log(\"[DEBUG] Timeout alcanzado, abortando petici\\xf3n\");\n                controller.abort();\n            }, isProduction ? 30000 : 10000);\n            try {\n                let response;\n                if (isMongoId) {\n                    const baseUrl =  false ? 0 : \"\";\n                    const url = \"\".concat(baseUrl, \"/property/\").concat(id);\n                    response = await fetch(url, {\n                        signal: controller.signal,\n                        headers: {\n                            \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n                            \"Pragma\": \"no-cache\",\n                            \"Expires\": \"0\"\n                        }\n                    });\n                } else {\n                    const baseUrl =  false ? 0 : \"/api/wordpress-proxy\";\n                    const url = \"\".concat(baseUrl, \"?path=products/\").concat(id);\n                    response = await fetch(url, {\n                        signal: controller.signal,\n                        headers: {\n                            \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n                            \"Pragma\": \"no-cache\",\n                            \"Expires\": \"0\"\n                        }\n                    });\n                }\n                clearTimeout(timeoutId);\n                if (!response.ok) {\n                    throw new Error(\"Error HTTP: \".concat(response.status));\n                }\n                const data = await response.json();\n                return isMongoId ? procesarDatosMongoDB(data) : procesarDatosWooCommerce(data);\n            } catch (error) {\n                clearTimeout(timeoutId);\n                throw error;\n            }\n        };\n        return await fetchConReintentos(fetchData, {\n            maxRetries: 7,\n            initialTimeout: 2000,\n            maxTimeout: 30000,\n            factor: 1.5,\n            isProduction\n        });\n    } catch (error) {\n        console.error(\"[DEBUG] Error final en getPropertyById:\", error);\n        throw error;\n    }\n}\n// Función auxiliar para procesar datos de MongoDB\nfunction procesarDatosMongoDB(data) {\n    let images = [];\n    if (data.images) {\n        if (Array.isArray(data.images)) {\n            images = data.images.map((img)=>{\n                if (typeof img === \"string\") {\n                    return img.startsWith(\"http\") ? img : \"\".concat(API_URL).concat(img.startsWith(\"/\") ? \"\" : \"/\").concat(img);\n                } else if (typeof img === \"object\" && img.src) {\n                    const src = img.src.startsWith(\"http\") ? img.src : \"\".concat(API_URL).concat(img.src.startsWith(\"/\") ? \"\" : \"/\").concat(img.src);\n                    return {\n                        ...img,\n                        src\n                    };\n                }\n                return img;\n            }).filter((img)=>img);\n        } else if (typeof data.images === \"string\") {\n            const img = data.images;\n            images = [\n                img.startsWith(\"http\") ? img : \"\".concat(API_URL).concat(img.startsWith(\"/\") ? \"\" : \"/\").concat(img)\n            ];\n        }\n    }\n    if (images.length === 0) {\n        images = [\n            \"/img/default-property-image.jpg\"\n        ];\n    }\n    return {\n        ...data,\n        _id: data._id,\n        title: data.title || data.name || \"Propiedad sin t\\xedtulo\",\n        description: data.description || \"\",\n        price: data.price || \"0\",\n        location: data.location || \"Madrid\",\n        bedrooms: data.bedrooms || data.rooms || 0,\n        bathrooms: data.bathrooms || data.wc || 0,\n        size: data.area || data.m2 || 0,\n        images: images,\n        source: \"mongodb\"\n    };\n}\n// Función auxiliar para procesar datos de WooCommerce\nfunction procesarDatosWooCommerce(data) {\n    var _data_meta_data_find, _data_meta_data, _data_meta_data_find1, _data_meta_data1, _data_meta_data_find2, _data_meta_data2;\n    let images = [];\n    if (data.images && Array.isArray(data.images) && data.images.length > 0) {\n        images = data.images.map((img)=>img.src || img).filter((img)=>img);\n    } else if (data.image && data.image.src) {\n        images = [\n            data.image.src\n        ];\n    }\n    if (images.length === 0) {\n        images = [\n            \"/img/default-property-image.jpg\"\n        ];\n    }\n    return {\n        ...data,\n        id: data.id,\n        title: data.name || \"Propiedad sin t\\xedtulo\",\n        description: data.description || \"\",\n        price: data.price || \"0\",\n        location: data.address || \"Madrid\",\n        bedrooms: ((_data_meta_data = data.meta_data) === null || _data_meta_data === void 0 ? void 0 : (_data_meta_data_find = _data_meta_data.find((m)=>m.key === \"bedrooms\")) === null || _data_meta_data_find === void 0 ? void 0 : _data_meta_data_find.value) || 0,\n        bathrooms: ((_data_meta_data1 = data.meta_data) === null || _data_meta_data1 === void 0 ? void 0 : (_data_meta_data_find1 = _data_meta_data1.find((m)=>m.key === \"bathrooms\")) === null || _data_meta_data_find1 === void 0 ? void 0 : _data_meta_data_find1.value) || 0,\n        size: ((_data_meta_data2 = data.meta_data) === null || _data_meta_data2 === void 0 ? void 0 : (_data_meta_data_find2 = _data_meta_data2.find((m)=>m.key === \"area\")) === null || _data_meta_data_find2 === void 0 ? void 0 : _data_meta_data_find2.value) || 0,\n        images: images,\n        source: \"woocommerce\"\n    };\n}\n// Función para enviar el formulario de contacto\nconst sendEmail = async (data)=>{\n    try {\n        // Reformatear los datos para adaptarse al formato esperado por la API\n        const formattedData = {\n            nombre: data.name,\n            email: data.email,\n            prefix: data.prefix || \"+34\",\n            telefono: data.phone || \"\",\n            asunto: data.message // El mensaje lo enviamos como asunto que es lo que espera el backend\n        };\n        // Validación local actualizada para campos\n        if (!formattedData.nombre || !formattedData.email) {\n            console.error(\"Faltan datos obligatorios:\", formattedData);\n            return {\n                success: false,\n                message: \"Faltan datos requeridos: nombre y email son obligatorios\",\n                error: \"Validaci\\xf3n local\",\n                ok: false\n            };\n        }\n        // Definir el endpoint para el contacto\n        const endpoint = \"\".concat(API_URL, \"/api/contact\");\n        const response = await fetch(endpoint, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(formattedData)\n        });\n        // Capturar la respuesta como texto para debugging\n        const responseText = await response.text();\n        // Intentar parsear la respuesta como JSON\n        let responseData;\n        try {\n            responseData = JSON.parse(responseText);\n        } catch (e) {\n            console.error(\"Respuesta no es JSON v\\xe1lido\");\n            return {\n                success: false,\n                message: \"Formato de respuesta inv\\xe1lido\",\n                error: \"El servidor no respondi\\xf3 con un formato v\\xe1lido\",\n                ok: false\n            };\n        }\n        // Agregar la propiedad ok para compatibilidad con el código existente\n        responseData.ok = response.ok;\n        return responseData;\n    } catch (error) {\n        console.error(\"Error al enviar formulario:\", error);\n        // Devolver un objeto con formato similar al de respuesta exitosa\n        return {\n            success: false,\n            message: \"Error de conexi\\xf3n\",\n            error: error.message,\n            ok: false\n        };\n    }\n};\nconst sendPropertyEmail = async (data)=>{\n    try {\n        const API_URL = \"https://goza-madrid.onrender.com\" || 0;\n        if (data.type === \"offer\") {\n            const endpoint = \"\".concat(API_URL, \"/api/property-offer/create\");\n            // Validar datos requeridos para la oferta\n            if (!data.offerAmount || !data.email || !data.name || !data.phone || !data.propertyId || !data.propertyTitle) {\n                throw new Error(\"Faltan datos de la oferta\");\n            }\n            // Mapear los campos según PropertyOfferSchema\n            const offerData = {\n                property: data.propertyId,\n                propertyAddress: data.propertyTitle,\n                offerPrice: parseFloat(data.offerAmount),\n                offerPercentage: data.offerLabel || \"Personalizada\",\n                email: data.email,\n                name: data.name,\n                phone: data.phone\n            };\n            console.log(\"Enviando datos de oferta:\", offerData);\n            const response = await fetch(endpoint, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(offerData)\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.message || \"Error en la respuesta del servidor\");\n            }\n            return await response.json();\n        } else if (data.type === \"visit\") {\n            const endpoint = \"\".concat(API_URL, \"/api/property-visit/create\");\n            // Validar que las fechas sean objetos Date válidos\n            if (!(data.visitDate instanceof Date) || !(data.visitTime instanceof Date)) {\n                throw new Error(\"Las fechas proporcionadas no son v\\xe1lidas\");\n            }\n            // Validar datos requeridos para la visita\n            if (!data.email || !data.name || !data.phone || !data.propertyId || !data.propertyTitle) {\n                throw new Error(\"Faltan datos de la visita\");\n            }\n            // Crear objetos Date para fecha y hora\n            const visitDate = new Date(data.visitDate);\n            const visitTime = new Date(data.visitTime);\n            // Combinar fecha y hora en un solo objeto Date\n            const combinedDateTime = new Date(visitDate.getFullYear(), visitDate.getMonth(), visitDate.getDate(), visitTime.getHours(), visitTime.getMinutes());\n            // Mapear los campos según PropertyVisitSchema\n            const visitData = {\n                property: data.propertyId,\n                propertyAddress: data.propertyTitle,\n                date: combinedDateTime,\n                time: combinedDateTime,\n                email: data.email,\n                name: data.name,\n                phone: data.phone,\n                message: data.message || \"\"\n            };\n            console.log(\"Enviando datos de visita:\", visitData);\n            const response = await fetch(endpoint, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(visitData)\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.message || \"Error en la respuesta del servidor\");\n            }\n            return await response.json();\n        }\n        throw new Error(\"Tipo de solicitud no v\\xe1lido\");\n    } catch (error) {\n        console.error(\"Error al enviar email:\", error);\n        return {\n            success: false,\n            message: error.message\n        };\n    }\n};\nasync function handler(req, res) {\n    const { url } = req.query;\n    if (!url) {\n        return res.status(400).json({\n            error: \"URL no proporcionada\"\n        });\n    }\n    try {\n        const imageResponse = await fetch(url);\n        const imageBuffer = await imageResponse.arrayBuffer();\n        // Obtener el tipo de contenido\n        const contentType = imageResponse.headers.get(\"content-type\");\n        // Configurar cabeceras de respuesta\n        res.setHeader(\"Content-Type\", contentType);\n        res.setHeader(\"Cache-Control\", \"public, max-age=86400\"); // Cachear por 24 horas\n        // Enviar la imagen\n        res.status(200).send(Buffer.from(imageBuffer));\n    } catch (error) {\n        console.error(\"Error al obtener imagen:\", error);\n        res.status(500).json({\n            error: \"Error al obtener la imagen\"\n        });\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pages/api.js\n"));

/***/ })

});